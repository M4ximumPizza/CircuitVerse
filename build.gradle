plugins {
    id("java")
    id("application")
    id("java-library")
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id 'org.openjfx.javafxplugin' version '0.0.10'
}

group = 'mi.m4x.project.circuitverse'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    // Logging
    implementation("org.tinylog:tinylog:$tiny_logger_version")
    implementation("com.github.tobiasrm:tinylog-coloredconsole:$tiny_logger_version")

    // Gdx
    implementation("com.badlogicgames.gdx:gdx-platform:$gdx_version")
    implementation("com.badlogicgames.gdx:gdx-platform:$gdx_version:natives-desktop")
    implementation("com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdx_version")
    
    // Audio
    implementation("games.rednblack.miniaudio:miniaudio:$mini_audio_version")
    implementation("games.rednblack.miniaudio:miniaudio:$mini_audio_version:natives-desktop")
    implementation files('libs/3DViewer.jar')
    
    // LWJGL dependencies
    implementation 'org.lwjgl:lwjgl:3.3.2'
    implementation 'org.lwjgl:lwjgl-opengl:3.3.2' // LWJGL OpenGL
    implementation 'org.lwjgl:lwjgl-stb:3.3.2' // LWJGL STB
    implementation 'org.lwjgl:lwjgl-tinyfd:3.3.2' // LWJGL TinyFileDialogs
    implementation 'org.lwjgl:lwjgl-jemalloc:3.3.2' // LWJGL Jemalloc
    implementation 'org.lwjgl:lwjgl-glfw:3.3.2' // GLFW

    // JUnit dependencies (already present)
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}


repositories {
    mavenCentral()

    maven {
        name "Jitpack"
        url "https://jitpack.io"
    }

}

javafx {
    version = "17.0.1"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.base' ]
}

configurations {
    shadowMe
    api.extendsFrom(shadowMe)

    internal { // Allows to include something without it being in the maven
        visible = false
        canBeConsumed = false
        canBeResolved = false
    }
    compileClasspath.extendsFrom(internal)
    runtimeClasspath.extendsFrom(internal)
    testCompileClasspath.extendsFrom(internal)
    testRuntimeClasspath.extendsFrom(internal)
}

tasks.shadowJar {
    mainClassName = "mi.m4x.project.circuitverse.main.Main"
}

tasks.runShadow {
    setCurWorkingDir(tasks.runShadow)
}

tasks.register("Run Circuit Verse", JavaExec) {
    group "circuit_verse"

    dependsOn "runShadow"
}

// Functions

static def void setCurWorkingDir(Task curTask) {
    // Change the run directory
    File runningDir = new File("run/")
    if (!runningDir.exists())
        runningDir.mkdirs()
    curTask.workingDir = runningDir
}
